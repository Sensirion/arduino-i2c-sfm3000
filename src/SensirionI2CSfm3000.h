/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.2.0
 * Yaml Version: 0.1.0
 * Template Version: 0.7.0-38-g217adaf
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef SENSIRIONI2CSFM3000_H
#define SENSIRIONI2CSFM3000_H

#define SFM300_I2C_ADDRESS_0 0x40

#include <Wire.h>

#include <SensirionCore.h>

class SensirionI2CSfm3000 {

  public:
    SensirionI2CSfm3000();
    /**
     * begin() - Initializes the SensirionI2CSfm3000 class.
     *
     * @param i2cBus Arduino stream object to use for communication.
     * @param i2cAddress address of your sensor, depends on SFM3000
     *
     */
    void begin(TwoWire& i2cBus, uint8_t i2cAddress);

    /**
     * startContinuousMeasurementWithMassFlowTCompAndAveraging() - This command
     * starts continuous measurements.
     *
     * @note The measurement command must only be sent once, if acknowledged.
     * The command must not be resent or other commands must not be sent.
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t startContinuousMeasurement(void);

    /**
     * readMeasurementRaw() - After a start continuous measurement commands, the
     * measurement results can be read out at most every 0.5ms.
     *
     * @param flowRaw The digital calibrated flow signal.
     * The integer value can be converted to the physical value by
     * dividing it by the scale factor. flow = (flowRaw - offset) / scale factor
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t readMeasurementRaw(uint16_t& flowRaw);

    /**
     * readMeasurement() - Wrapper for readMeasurementRaw() returning
     * sensor values in physical units.
     *
     * @param flow calibrated flow value
     * @param scalingFactor scaling factor as retrieved from datasheet
     * @param offset flow offset as retrieved from datasheet
     * @return 0 on success, an error code otherwise
     */
    uint16_t readMeasurement(float& flow, float scalingFactor, float offset);

    /**
     * readSerialNumber() - Read the serial number of the sensor.
     *
     * @param serialNumber 32-bit unique serial number listed on the sensor
     *
     * @return 0 on success, an error code otherwise
     */
    uint16_t readSerialNumber(uint32_t& serialNumber);

  private:
    TwoWire* _i2cBus = nullptr;
    uint8_t _i2cAddress = 0x0;
};

#endif /* SENSIRIONI2CSFM3000_H */
