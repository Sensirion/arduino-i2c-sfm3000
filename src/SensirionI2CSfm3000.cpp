/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.2.0
 * Yaml Version: 0.1.0
 * Template Version: 0.7.0-38-g217adaf
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SensirionI2CSfm3000.h"
#include "Arduino.h"
#include "SensirionCore.h"
#include <Wire.h>

SensirionI2CSfm3000::SensirionI2CSfm3000() {
}

void SensirionI2CSfm3000::begin(TwoWire& i2cBus, uint8_t i2cAddress) {
    _i2cBus = &i2cBus;
    _i2cAddress = i2cAddress;
}

uint16_t
SensirionI2CSfm3000::startContinuousMeasurement() {
    uint16_t error;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x1000, buffer, 2,
                                                     CRC31_00);

    error =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    delay(1);
    return error;
}


uint16_t SensirionI2CSfm3000::readMeasurementRaw(uint16_t& flowRaw) {
    uint16_t error;
    uint8_t buffer[3];

    delay(1);

    SensirionI2CRxFrame rxFrame(buffer, 3);
    error = SensirionI2CCommunication::receiveFrame(_i2cAddress, 3, rxFrame,
                                                    *_i2cBus,
                                                    CRC31_00);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt16(flowRaw);
    return error;
}

uint16_t SensirionI2CSfm3000::readMeasurement(float& flow, float scalingFactor, 
                                              float offset) {
    int16_t error;
    uint16_t flowRaw;

    error = readMeasurementRaw(flowRaw);
    if (error) {
        return error;
    }

    flow = ((float)flowRaw - offset) / scalingFactor;
    return NoError;
}

uint16_t SensirionI2CSfm3000::readSerialNumber(uint32_t& serialNumber) {
    uint16_t error;
    uint8_t buffer[6];

    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x31AE, buffer, 2,
                                                     CRC31_00);

    error = SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(1);

    SensirionI2CRxFrame rxFrame(buffer, 6);
    error = SensirionI2CCommunication::receiveFrame(_i2cAddress, 6, rxFrame,
                                                    *_i2cBus,
                                                    CRC31_00);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt32(serialNumber);
    return error;
}
